kind: Ingress
apiVersion: extensions/v1beta1
metadata:
  name: grafana
  namespace: default
  annotations:
      traefik.frontend.rule.type: PathPrefixStrip
spec:
  rules:
  - host: {{ .Values.global.host }}
    http:
      paths:
      - path: /grafana
        backend:
          serviceName: grafana
          servicePort: 2222
---
kind: Ingress
apiVersion: extensions/v1beta1
metadata:
  name: frost-server
  namespace: default
  annotations:
      traefik.frontend.rule.type: PathPrefixStrip
spec:
  rules:
  - host: {{ .Values.global.host }}
    http:
      paths:
      - path: /frost-server
        backend:
          serviceName: my-frost-server-http
          servicePort: 80
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: grafana-pv
  labels:
    type: local
spec:
  storageClassName: standard
  capacity:
    storage: {{ .Values.grafana.persistence.size }}
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/var/lib/grafana"
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: frost-pv
  labels:
    type: local
spec:
  storageClassName: standard
  capacity:
    storage: {{ .Values.frost.size }}
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/tmp/frost"
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: grafana-pvc
spec:
  storageClassName: standard
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.grafana.persistence.size }}
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: frost-pvc
spec:
  storageClassName: standard
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.frost.size }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: traefik-ingress-controller
  namespace: kube-system
---
kind: DaemonSet
apiVersion: extensions/v1beta1
metadata:
  name: traefik-ingress-controller
  namespace: kube-system
  labels:
    k8s-app: traefik-ingress-lb
spec:
  template:
    metadata:
      labels:
        k8s-app: traefik-ingress-lb
        name: traefik-ingress-lb
    spec:
      serviceAccountName: traefik-ingress-controller
      terminationGracePeriodSeconds: 60
      containers:
      - image: traefik
        name: traefik-ingress-lb
        ports:
        - name: http
          containerPort: 80
          hostPort: 80
        - name: admin
          containerPort: 8080
        securityContext:
          procMount: default
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
        args:
        - --api
        - --kubernetes
        - --logLevel=DEBUG
---
kind: Service
apiVersion: v1
metadata:
  name: traefik-ingress-service
  namespace: kube-system
spec:
  selector:
    k8s-app: traefik-ingress-lb
  ports:
    - protocol: TCP
      port: 80
      name: web
    - protocol: TCP
      port: 8080
      name: admin
---
apiVersion: v1
kind: Service
metadata:
  name: traefik-web-ui
  namespace: kube-system
spec:
  selector:
    k8s-app: traefik-ingress-lb
  ports:
  - name: dashboard
    port: 80
    targetPort: 8080
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: traefik-web-ui
  namespace: kube-system
  annotations: 
    traefik.frontend.rule.type: PathPrefixStrip   
spec:
  rules:
  - host: {{ .Values.global.host }}
    http:
      paths:
      - path: /dashboard
        backend:
          serviceName: traefik-web-ui
          servicePort: dashboard
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: traefik-ingress-controller
rules:
  - apiGroups:
      - ""
    resources:
      - services
      - endpoints
      - secrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: traefik-ingress-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: traefik-ingress-controller
subjects:
- kind: ServiceAccount
  name: traefik-ingress-controller
  namespace: kube-system
---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ include "appoline-k8s.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "appoline-k8s.name" . }}
    helm.sh/chart: {{ include "appoline-k8s.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "appoline-k8s.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "appoline-k8s.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
